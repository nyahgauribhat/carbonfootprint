# -*- coding: utf-8 -*-
"""carbonemission.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12sw8rMVfDHbGz_MM5JFmW4dTWLnIk-jf
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import r2_score, mean_absolute_error, accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
import joblib

"""## load data"""

ce_dataframe= pd.read_excel('/content/carbonfootprintdataset (1).xlsx')

ce_dataframe.shape

ce_dataframe.head()

ce_dictionary = {'a':1 , 'b':2, 'c':3 , 'd':4}

ce_dataframe['rewards']=ce_dataframe['rewards'].map(ce_dictionary)

ce_dataframe.head()

X = ce_dataframe.drop('rewards', axis=1)
y = ce_dataframe['rewards']

train_X, test_X, train_y, test_y = train_test_split(X, y, random_state = 0, test_size = 0.2)

carbonemission_model_lr = LogisticRegression(random_state=0)
carbonemission_model_lr.fit(train_X, train_y)
pred_y = carbonemission_model_lr.predict(test_X)
accuracy = accuracy_score(test_y, pred_y)
print(accuracy)

carbonemission_model_dtc = DecisionTreeClassifier(random_state=1)
carbonemission_model_dtc.fit(train_X, train_y)
pred_y = carbonemission_model_dtc.predict(test_X)
accuracy = accuracy_score(test_y, pred_y)
print(accuracy)

carbonemission_model_rf = RandomForestClassifier(random_state=1)
carbonemission_model_rf.fit(train_X, train_y)
pred_y = carbonemission_model_rf.predict(test_X)
accuracy = accuracy_score(test_y, pred_y)
print(accuracy)

coefficient = carbonemission_model_lr.coef_

num_features = 3

class_name_dict = {
    1: 'a', 2: 'b', 3: 'c', 4:'d'

}

for class_name in np.unique(y):
  print(f'top {num_features} features for class {class_name_dict[class_name]}')
  class_index = class_name-1
  top_feature_indices = np.argsort(np.abs(coefficient[class_index]))[::-1][:num_features]
  top_feature_names = ce_dataframe.columns[top_feature_indices]
  top_feature_importance = coefficient[class_index][top_feature_indices]
  for feature_name, importance in zip(top_feature_names, top_feature_importance):
    print(f'\t{feature_name}: {np.abs(importance):0.1f}')



joblib.dump(carbonemission_model_lr,'carbonemission_model.sav')

loaded_model=joblib.load('carbonemission_model.sav')